#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class rtypeBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(rtypeBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class rtypeParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=rtypeBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(rtypeParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _start_(self):
        self._file_()
        self.name_last_node('file')
        self._check_eof()
        self.ast._define(
            ['file'],
            []
        )

    @graken()
    def _file_(self):

        def block0():
            self._classdef_()
            self.name_last_node('pccset')
        self._positive_closure(block0)
        self.ast._define(
            ['pccset'],
            []
        )

    @graken()
    def _classdef_(self):
        self._classname_()
        self.name_last_node('classname')
        self._token(':')
        self._classbody_()
        self.name_last_node('classbody')
        self.ast._define(
            ['classbody', 'classname'],
            []
        )

    @graken()
    def _classname_(self):
        self._token('class')
        self._identifier_()
        self.name_last_node('@')

    @graken()
    def _classbody_(self):
        with self._optional():
            self._primarydef_()
            self.name_last_node('primarydef')
        self._normaldefs_()
        self.name_last_node('declarations')
        self._mergefunc_()
        self.name_last_node('mergefunc')
        self.ast._define(
            ['declarations', 'mergefunc', 'primarydef'],
            []
        )

    @graken()
    def _primarydef_(self):
        self._token('primary')
        self._statement_()
        self.name_last_node('@')

    @graken()
    def _normaldefs_(self):

        def block0():
            self._statement_()
        self._closure(block0)

    @graken()
    def _statement_(self):
        self._typedef_()
        self.name_last_node('type')
        self._identifier_()
        self.name_last_node('name')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @graken()
    def _mergefunc_(self):
        with self._optional():
            self._token('merge')
            self._token('func')
            self._identifier_()
            self.name_last_node('@')

    @graken()
    def _typedef_(self):
        with self._choice():
            with self._option():
                self._token('int')
            with self._option():
                self._token('bool')
            with self._option():
                self._token('float')
            self._error('expecting one of: bool float int')

    @graken()
    def _identifier_(self):
        self._pattern(r'[_a-zA-Z][_a-zA-Z0-9]*')


class rtypeSemantics(object):
    def start(self, ast):
        return ast

    def file(self, ast):
        return ast

    def classdef(self, ast):
        return ast

    def classname(self, ast):
        return ast

    def classbody(self, ast):
        return ast

    def primarydef(self, ast):
        return ast

    def normaldefs(self, ast):
        return ast

    def statement(self, ast):
        return ast

    def mergefunc(self, ast):
        return ast

    def typedef(self, ast):
        return ast

    def identifier(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = rtypeParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, rtypeParser, name='rtype')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
